#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Quotation
En este curso vamos a usar varios lenguajes de programación indistintamente.
\end_layout

\begin_layout Section
LENGUAJES DE PROGRAMACIÓN
\end_layout

\begin_layout Subsection
Definición de Lenguaje de Programación
\end_layout

\begin_layout Subsection
Definición de Programa
\end_layout

\begin_layout Subsection
Paradigmas de la Programación
\end_layout

\begin_layout Subsubsection
Programación Funcional y Estructurada
\end_layout

\begin_layout Subsubsection
Programación Orientada a Objetos
\end_layout

\begin_layout Subsubsection
Programación Lógica
\end_layout

\begin_layout Subsubsection
Programación Orientada a Datos
\end_layout

\begin_layout Subsection
Traductores
\end_layout

\begin_layout Subsection
Código fuente, objeto y ejecutable
\end_layout

\begin_layout Subsection
Entornos de desarrollo integrado
\end_layout

\begin_layout Section
ELEMENTOS BÁSICOS DE LA PROGRAMACIÓN ESTRUCTURADA.
\end_layout

\begin_layout Subsection
Tipos de datos primitivos
\end_layout

\begin_layout Subsection
Palabras reservadas
\end_layout

\begin_layout Subsection
Variables
\end_layout

\begin_layout Subsection
Constantes
\end_layout

\begin_layout Subsection
Expresiones
\end_layout

\begin_layout Subsection
Jerarquía de operadores
\end_layout

\begin_layout Subsection
Operadores aritméticos
\end_layout

\begin_layout Subsection
Operadores relacionales
\end_layout

\begin_layout Subsection
Operadores lógicos o booleanos
\end_layout

\begin_layout Section
CONTROL DE FLUJO DE SENTENCIAS
\end_layout

\begin_layout Subsection
Sentencias incondicionales
\end_layout

\begin_layout Subsection
Sentencias condicionales
\end_layout

\begin_layout Section
VARIABLE CON SUBINDICE O ARREGLOS
\end_layout

\begin_layout Subsection
Definición
\end_layout

\begin_layout Subsection
Arreglos unidimensionales
\end_layout

\begin_layout Subsection
Arreglos bidimensionales
\end_layout

\begin_layout Section
FUNCIONES
\end_layout

\begin_layout Subsection
Concepto de función en programación
\end_layout

\begin_layout Subsection
Llamada o invocación a una función
\end_layout

\begin_layout Subsection
Parámetros
\end_layout

\begin_layout Subsection
Valor de retorno
\end_layout

\begin_layout Section
ELEMENTOS BÁSICOS DE LA PROGRAMACIÓN ORIENTADA A OBJETOS
\end_layout

\begin_layout Subsection
Concepto de objeto
\end_layout

\begin_layout Subsection
Anatomía de un objeto
\end_layout

\begin_layout Subsection
Beneficios de la programación orientada a objetos
\end_layout

\begin_layout Section
CLASES Y OBJETOS
\end_layout

\begin_layout Subsection
Definición de una clase
\end_layout

\begin_layout Subsection
Miembros de una clase
\end_layout

\begin_layout Section
ENCAPSULAMIENTO
\end_layout

\begin_layout Subsection
Modularidad
\end_layout

\begin_layout Subsection
Ocultamiento de la implementación
\end_layout

\begin_layout Subsection
Protección de variables y métodos
\end_layout

\begin_layout Section
HERENCIA
\end_layout

\begin_layout Subsection
Jerarquía de clases
\end_layout

\begin_layout Subsection
Tipos herencia
\end_layout

\begin_layout Section
INTERFAZ GRÁFICA
\end_layout

\begin_layout Subsection
Definición de GUI
\end_layout

\begin_layout Subsection
Formularios
\end_layout

\begin_layout Subsection
Contenedores
\end_layout

\begin_layout Subsection
Componentes
\end_layout

\begin_layout Subsection
Eventos
\end_layout

\end_body
\end_document
